import React, { useState, useEffect } from "react";
import jsPDF from "jspdf";
import { motion } from "framer-motion";
import allServices from "../../../data/hhsServices";
import "./styles/CaseStoryPage.css";
import HelpDescription from "./helpDescription";
import ProgressBar from "./ProgresBar";
import ClientHeader from "./ClientHeader";
import Modal from "./DemoModal";

const CaseStoryPage = () => {
  const [selectedDivision, setSelectedDivision] = useState("");
  const [selectedTitle, setSelectedTitle] = useState("");
  const [selectedOption, setSelectedOption] = useState("");
  const [selectedServices, setSelectedServices] = useState([]);
  const [searchTermDivision, setSearchTermDivision] = useState("");
  const [searchTermTitle, setSearchTermTitle] = useState("");
  const [searchTermOption, setSearchTermOption] = useState("");
  const [nextInput, setNextInput] = useState(""); // State for "What's Next"

  // Add this missing state
  const [showModal, setShowModal] = useState(true);

  const handleCloseModal = () => {
    setShowModal(false); // Hide modal on close
  };

  useEffect(() => {
    // Trigger the modal automatically when the page loads
    setShowModal(true);
  }, []);

  // Calculate current step based on user selection
  const currentStep = selectedDivision
    ? selectedTitle
      ? selectedOption
        ? 3
        : 2
      : 1
    : 0;
  const totalSteps = 3; // Total steps for the form

  const handleExportPDF = () => {
    const pdf = new jsPDF("p", "mm", "a4"); // Create a new jsPDF instance
    const pageHeight = pdf.internal.pageSize.height; // Page height in mm
    const leftMargin = 10;
    const rightMargin = 190; // A4 page width in mm minus 20mm for left/right margins
    let startY = 40; // Start Y position for content
    let currentY = startY; // Keep track of the Y position on the page

    // Add Header
    pdf.setFontSize(18);
    pdf.setFont("helvetica", "bold");
    pdf.text("Client Journey Report", 105, 20, { align: "center" });

    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text("Generated by EDORA", 105, 28, { align: "center" });

    // Grab the services list to add to the PDF
    const servicesList = document.getElementById("client-journey");

    if (!servicesList) {
      console.error("Element with ID 'client-journey' not found.");
      return;
    }

    // Iterate over the service items and add them to the PDF as text
    const serviceItems = servicesList.querySelectorAll(".service-card"); // Fetch service cards
    serviceItems.forEach((item, index) => {
      const title = item.querySelector(".dark").textContent; // Get title
      const division = item.querySelector("p:nth-child(2)").textContent; // Division
      const event = item.querySelector("p:nth-child(3)").textContent; // Event
      const operation = item.querySelector("p:nth-child(4)").textContent; // Operation
      const next = item.querySelector("p:nth-child(5)")?.textContent; // Next, optional

      const linesToAdd = [
        `Service #${index + 1}`,
        `Title: ${title}`,
        `Division: ${division}`,
        `Event: ${event}`,
        `Operation: ${operation}`,
      ];

      if (next) {
        linesToAdd.push(`Next: ${next}`);
      }

      // Calculate the height for each entry
      const lineHeight = 10;
      const totalLineHeight = linesToAdd.length * lineHeight;

      // Check if adding the current service would overflow the page
      if (currentY + totalLineHeight > pageHeight - 20) {
        pdf.addPage(); // Add a new page
        currentY = 20; // Reset Y position to the top of the new page
      }

      // Add the service text to the PDF
      linesToAdd.forEach((line) => {
        const wrappedText = pdf.splitTextToSize(line, rightMargin - leftMargin); // Wrap text
        pdf.text(wrappedText, leftMargin, currentY);
        currentY += lineHeight; // Move down by one line height after each line
      });

      currentY += 10; // Add extra space between services
    });

    // Add Footer with page number
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(10);
      pdf.text(
        `Page ${i} of ${totalPages}`,
        105,
        pdf.internal.pageSize.height - 10,
        {
          align: "center",
        }
      );
    }

    pdf.save("client-journey.pdf"); // Save the PDF
  };

  // Fetch divisions for the sidebar
  const divisions = [
    ...new Set(allServices.map((service) => service.division)),
  ];
  const filteredServices = allServices.filter(
    (service) => service.division === selectedDivision
  );
  const selectedService = allServices.find(
    (service) => service.title === selectedTitle
  );

  // Handlers for changing divisions, titles, and options
  const handleDivisionChange = (division) => {
    setSelectedDivision(division);
    setSelectedTitle("");
    setSelectedOption("");
  };

  const handleTitleChange = (title) => {
    setSelectedTitle(title);
    setSelectedOption("");
  };

  const handleOptionChange = (option) => {
    setSelectedOption(option);
  };

  // Adding the service to the list (cards)
  const handleAddService = () => {
    const newService = {
      division: selectedDivision,
      title: selectedTitle,
      option: selectedOption || "No extra option",
      nextInput: nextInput || "", // Include "What's Next" input
    };
    setSelectedServices((prevServices) => [...prevServices, newService]);

    // Reset the fields after adding
    setSelectedDivision("");
    setSelectedTitle("");
    setSelectedOption("");
    setNextInput("");

    // Reset the search filters too
    setSearchTermDivision("");
    setSearchTermTitle("");
    setSearchTermOption("");
  };

  const handleDeleteService = (index) => {
    const updatedServices = [...selectedServices];
    updatedServices.splice(index, 1); // Remove the selected service by index
    setSelectedServices(updatedServices);
  };

  const handleEditService = (index, service) => {
    // Set the current service fields for editing
    setSelectedDivision(service.division);
    setSelectedTitle(service.title);
    setSelectedOption(service.option);
    setNextInput(service.nextInput);

    // Remove the service from the list temporarily so the user can edit and re-add it
    handleDeleteService(index);
  };

  return (
    <>
      {showModal && <Modal onClose={handleCloseModal} />}

      <ClientHeader />

      <div className="top-section-inline">
        <HelpDescription />{" "}
        <ProgressBar currentStep={currentStep} totalSteps={totalSteps} />
      </div>

      <div className="case-story-page-container">
        {/* Sidebar for Divisions */}
        <div className="sidebar">
          <h3 className="dark">Select Division</h3>
          <input
            type="text"
            value={searchTermDivision}
            onChange={(e) => setSearchTermDivision(e.target.value)}
            placeholder="Search divisions..."
          />
          {/* Clear link */}
          <a
            href="#"
            className="clear-link"
            onClick={() => setSearchTermDivision("")}
          >
            Clear
          </a>
          <div className="list-box">
            {divisions
              .filter((division) =>
                division
                  .toLowerCase()
                  .includes(searchTermDivision.toLowerCase())
              )
              .map((division, index) => (
                <motion.div
                  key={index}
                  className={`list-item ${
                    selectedDivision === division ? "selected" : ""
                  }`}
                  onClick={() => handleDivisionChange(division)}
                >
                  {division}
                </motion.div>
              ))}
          </div>
        </div>

        {/* Middle Column for Event Types */}
        <div className="event-types-column">
          <h3 className="dark">Event Types</h3>
          <input
            type="text"
            value={searchTermTitle}
            onChange={(e) => setSearchTermTitle(e.target.value)}
            placeholder="Search event types..."
          />
          {/* Clear link */}
          <a
            href="#"
            className="clear-link"
            onClick={() => setSearchTermTitle("")}
          >
            Clear
          </a>
          <div className="event-types-container">
            {filteredServices
              .filter((service) =>
                service.title
                  .toLowerCase()
                  .includes(searchTermTitle.toLowerCase())
              )
              .map((service, index) => (
                <div
                  key={index}
                  className={`event-card ${
                    selectedTitle === service.title ? "selected" : ""
                  }`}
                  onClick={() => handleTitleChange(service.title)}
                >
                  <h6 className="dark">{service.title}</h6>
                </div>
              ))}
          </div>
        </div>

        {/* Right Column for Selected Services (Cards) */}
        <div className="selected-services-column">
          {selectedServices.length > 0 && (
            <div className="export-button">
              <button className="btn" onClick={handleExportPDF}>
                PDF
              </button>
            </div>
          )}

          <h3 className="dark">Operations</h3>

          {selectedService && (
            <>
              <h3 className="dark">Filter Operations</h3>
              <input
                type="text"
                value={searchTermOption}
                onChange={(e) => setSearchTermOption(e.target.value)}
                placeholder="Search Operations ..."
              />
              {/* Clear link */}
              <a
                href="#"
                className="clear-link"
                onClick={() => setSearchTermOption("")}
              >
                Clear
              </a>
              <div className="list-box">
                {selectedService.options
                  .filter((option) =>
                    option.label
                      .toLowerCase()
                      .includes(searchTermOption.toLowerCase())
                  )
                  .map((option, index) => (
                    <motion.div
                      key={index}
                      className={`list-item ${
                        selectedOption === option.next ? "selected" : ""
                      }`}
                      onClick={() => handleOptionChange(option.next)} // Ensure this works correctly
                    >
                      {option.label}
                    </motion.div>
                  ))}
              </div>

              {/* Textarea for "What's Next" after selecting an option */}
              {selectedOption && (
                <div className="next-input">
                  <label htmlFor="nextInput" className="label">
                    What's next for the client?
                  </label>
                  <textarea
                    id="nextInput"
                    className="textbox"
                    placeholder="Notes ..."
                    value={nextInput}
                    onChange={(e) => setNextInput(e.target.value)}
                  />
                </div>
              )}

              {selectedTitle && (
                <button className="add-service-btn" onClick={handleAddService}>
                  Add Service
                </button>
              )}
            </>
          )}

          {selectedServices.length > 0 && (
            <>
              {/* Wrap the services list with client-journey ID */}
              <div id="client-journey" className="selected-services">
                {selectedServices.map((service, index) => (
                  <div key={index} className="service-card">
                    <div className="card-header">
                      <h4 className="dark">{service.title}</h4>
                      <div className="card-actions">
                        <button
                          className="edit-btn"
                          onClick={() => handleEditService(index, service)}
                        >
                          ✏️
                        </button>
                        <button
                          className="delete-btn"
                          onClick={() => handleDeleteService(index)}
                        >
                          🗑️
                        </button>
                      </div>
                    </div>
                    <p>
                      <strong>Division:</strong> {service.division}
                    </p>
                    <p>
                      <strong>Event:</strong> {service.title}
                    </p>
                    <p>
                      <strong>Operation:</strong>{" "}
                      {service.option || "No extra option"}
                    </p>
                    {service.nextInput && (
                      <p>
                        <strong>Next:</strong> {service.nextInput}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default CaseStoryPage;
