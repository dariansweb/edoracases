import React, { useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import { motion } from "framer-motion";
import allServices from "../../../data/hhsServices";
import "./styles/CaseStoryPage.css";
// import FABScrollButtons from "../../../assets/prototypes/floatActionButtons/FABScrollButtons";
import ClientHeader from "./ClientHeader";

const CaseStoryPage = () => {
  const [selectedDivision, setSelectedDivision] = useState("");
  const [selectedTitle, setSelectedTitle] = useState("");
  const [selectedOption, setSelectedOption] = useState("");
  const [selectedServices, setSelectedServices] = useState([]);
  const [searchTermDivision, setSearchTermDivision] = useState("");
  const [searchTermTitle, setSearchTermTitle] = useState("");
  const [searchTermOption, setSearchTermOption] = useState("");
  const [nextInput, setNextInput] = useState(""); // State for "What's Next"

  const handleExportPDF = () => {
    const pdf = new jsPDF("p", "mm", "a4"); // Create a new jsPDF instance

    // Add Header
    pdf.setFontSize(18);
    pdf.setFont("helvetica", "bold");
    pdf.text("Client Journey Report", 105, 20, { align: "center" });

    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text("Generated by EDORA", 105, 28, { align: "center" });

    // Start Y position for the main content
    let startY = 40;

    // Grab the services list to add to the PDF
    const servicesList = document.getElementById("client-journey");

    if (!servicesList) {
      console.error("Element with ID 'client-journey' not found.");
      return;
    }

    // Iterate over the service items and add them to the PDF as text
    const serviceItems = servicesList.querySelectorAll(".service-card"); // Fetch service cards
    serviceItems.forEach((item, index) => {
      const title = item.querySelector(".dark").textContent; // Get title
      const division = item.querySelector("p:nth-child(2)").textContent; // Division
      const event = item.querySelector("p:nth-child(3)").textContent; // Event
      const operation = item.querySelector("p:nth-child(4)").textContent; // Operation
      const next = item.querySelector("p:nth-child(5)")?.textContent; // Next, optional

      pdf.text(`Service #${index + 1}`, 10, startY + index * 20);
      pdf.text(`Title: ${title}`, 10, startY + index * 20 + 5);
      pdf.text(`Division: ${division}`, 10, startY + index * 20 + 10);
      pdf.text(`Event: ${event}`, 10, startY + index * 20 + 15);
      pdf.text(`Operation: ${operation}`, 10, startY + index * 20 + 20);
      if (next) {
        pdf.text(`Next: ${next}`, 10, startY + index * 20 + 25);
      }
    });

    // Add Footer with page number
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(10);
      pdf.text(
        `Page ${i} of ${totalPages}`,
        105,
        pdf.internal.pageSize.height - 10,
        {
          align: "center",
        }
      );
    }

    pdf.save("client-journey.pdf"); // Save the PDF
  };

  // Fetch divisions for the sidebar
  const divisions = [
    ...new Set(allServices.map((service) => service.division)),
  ];
  const filteredServices = allServices.filter(
    (service) => service.division === selectedDivision
  );
  const selectedService = allServices.find(
    (service) => service.title === selectedTitle
  );

  // Handlers for changing divisions, titles, and options
  const handleDivisionChange = (division) => {
    setSelectedDivision(division);
    setSelectedTitle("");
    setSelectedOption("");
  };

  const handleTitleChange = (title) => {
    setSelectedTitle(title);
    setSelectedOption("");
  };

  const handleOptionChange = (option) => {
    setSelectedOption(option);
  };

  // Adding the service to the list (cards)
  const handleAddService = () => {
    const newService = {
      division: selectedDivision,
      title: selectedTitle,
      option: selectedOption || "No extra option",
      nextInput: nextInput || "", // Include "What's Next" input
    };
    setSelectedServices((prevServices) => [...prevServices, newService]);

    // Reset the fields after adding
    setSelectedDivision("");
    setSelectedTitle("");
    setSelectedOption("");
    setNextInput("");

    // Reset the search filters too
    setSearchTermDivision("");
    setSearchTermTitle("");
    setSearchTermOption("");
  };

  const handleDeleteService = (index) => {
    const updatedServices = [...selectedServices];
    updatedServices.splice(index, 1); // Remove the selected service by index
    setSelectedServices(updatedServices);
  };

  const handleEditService = (index, service) => {
    // Set the current service fields for editing
    setSelectedDivision(service.division);
    setSelectedTitle(service.title);
    setSelectedOption(service.option);
    setNextInput(service.nextInput);

    // Remove the service from the list temporarily so the user can edit and re-add it
    handleDeleteService(index);
  };

  return (
    <>
      <ClientHeader />
      <div className="case-story-page-container">
        {/* Sidebar for Divisions */}
        <div className="sidebar">
          <h3 className="dark">Select Division</h3>
          <div className="filter-wrapper">
            <input
              type="text"
              value={searchTermDivision}
              onChange={(e) => setSearchTermDivision(e.target.value)}
              placeholder="Search divisions..."
            />
            {/* Clear link */}
            <a
              href="#"
              className="clear-link"
              onClick={() => setSearchTermDivision("")}
            >
              Clear
            </a>
          </div>
        </div>

        {/* Middle Column for Event Types */}
        {/* Event Types Filter */}
        <div className="event-types-column">
          <h3 className="dark">Event Types</h3>
          <div className="filter-wrapper">
            <input
              type="text"
              value={searchTermTitle}
              onChange={(e) => setSearchTermTitle(e.target.value)}
              placeholder="Search event types..."
            />
            {/* Clear link */}
            <a
              href="#"
              className="clear-link"
              onClick={() => setSearchTermTitle("")}
            >
              Clear
            </a>
          </div>
        </div>

        {/* Right Column for Selected Services (Cards) */}
        <div className="selected-services-column">
          <h3 className="dark">Selected Services</h3>
          {/* Filter for Options */}
          {selectedService && (
            <>
              <h3 className="dark">Filter Options</h3>
              <div className="filter-wrapper">
                <input
                  type="text"
                  value={searchTermOption}
                  onChange={(e) => setSearchTermOption(e.target.value)}
                  placeholder="Search options..."
                />
                {/* Clear link */}
                <a
                  href="#"
                  className="clear-link"
                  onClick={() => setSearchTermOption("")}
                >
                  Clear
                </a>
              </div>
            </>
          )}

          {selectedServices.length > 0 && (
            <>
              <div className="export-button">
                <button className="btn" onClick={handleExportPDF}>
                  Export PDF
                </button>
              </div>

              {/* Wrap the services list with client-journey ID */}
              <div id="client-journey" className="selected-services">
                {selectedServices.map((service, index) => (
                  <div key={index} className="service-card">
                    <div className="card-header">
                      <h4 className="dark">{service.title}</h4>
                      <div className="card-actions">
                        <button
                          className="edit-btn"
                          onClick={() => handleEditService(index, service)}
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          className="delete-btn"
                          onClick={() => handleDeleteService(index)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </div>
                    <p>
                      <strong>Division:</strong> {service.division}
                    </p>
                    <p>
                      <strong>Event:</strong> {service.title}
                    </p>
                    <p>
                      <strong>Operation:</strong>{" "}
                      {service.option || "No extra option"}
                    </p>
                    {service.nextInput && (
                      <p>
                        <strong>Next:</strong> {service.nextInput}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default CaseStoryPage;
